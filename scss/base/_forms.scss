/*
Forms

Styleguide 3
*/

// Buttons
//
// Markup:
//<h4>Primary Button</h4>
// <button class="button-primary">Primary Button</button>
//<h4>Default/Secondary Button</h4>
// <button>Default Button</button>
//
// PatternType: atom
//
// Styleguide 3.1



button,
.button,
.button-primary {

	background: $button-background;
	color: $button-font-color;
	border-radius: $border-radius-primary;
	border: none;
	outline: none;
	padding: $spacing-inner $spacing-inner*3;
	font-size: $font-size-button;
	cursor: pointer;
	font-family: $button-font-primary;
	font-style: normal;

	&:hover,
	&:focus {
		color: $button-font-color;
		background: $button-background-hover;
	}

	&-primary {
		color: $button-primary-font-color;
		background: $button-primary-background;

		&:hover,
		&:focus {
			background: $button-primary-background-hover;
		}

	}

}

// Has-Buttons Context
//
// Like all context classes, a container with `.has-buttons` applied should only have
// elements that are buttons or have a `.button` class applied.
//
// Markup:
// <div class="has-buttons">
//   <button class="button-primary">Primary Button</button>
//   <button>Default Button</button>
// </div>
//
// PatternType: molecule
//
// ContainsPatterns: Button
//
// Styleguide 3.1.1

.has-buttons {

	button,
	.button {
		display:inline-block;
		& + button,
		& + .button {
			margin: 0 0 0 $spacing-inner;
		}
	}

	&.right {

		text-align: right;

		button,
		.button {
			& + button,
			& + .button {
				margin: 0 $spacing-inner 0 0;
			}
		}
	}

}

@media (min-width: $screen-med) {
	.has-buttons {
		margin: $spacing-outer 0;
	}
}



// Form Fields
//
// All form fields should be wrapped inside of their respective label
// elements. This accommplishes a few things:
//
// - Clicking on the label element will bring focus to its input regardless of whether a `for` value is set
// - It groups all content relevant to an input in with it, which can aid screen readers in assigning context
// - This provides a baked-in element that can be leveraged for positioning and spacing alongside the input itself, which can be very valuable
// - A feedback class (error, alert, success, etc) applied to the label element will be inherited by all content, which leads to less markup
//
// Styleguide 3.2.0



input[type="tel"],
input[type="text"],
input[type="number"],
input[type="email"],
input[type="search"],
input[type="password"],
textarea,
label.form-select,
fieldset.has-checkboxes,
fieldset.has-radios {

	background: $panel-background-primary;
	border: $border-width-primary solid $panel-background-primary;
	box-sizing: border-box;
	border-radius: $border-radius-primary;

	&:focus {
		border-color: $border-color-primary;
	}
}

label.form-text {

	position: relative;
	background: $background-color-primary;
	border-radius: 1rem;
	box-sizing: border-box;
	z-index: 1;
	display: inline-block;
	min-width: 25rem;
	margin: $spacing-outer/2 0; // because element is inline-block, margins won't collapse.

	.field-description {
		position: absolute;
		display: block;
		left: 0.75rem;
		top: 0.5rem;
		z-index: 5;
		font-family: $font-family-secondary;
	}

	input[type="tel"],
	input[type="text"],
	input[type="number"],
	input[type="email"],
	input[type="search"],
	input[type="password"],
	textarea {
		width: 100%;
		padding: 2.25rem 0.75rem 0.75rem;
		position: relative;
		z-index: 3;
		display: inline-block;
		font-size: $font-size-primary;
	}

}

// Text Inputs
//
// Markup:
// <label for="styleguide-text-input-1" class="form-text">
//   <span id="input-description-1" class="field-description">Input Description</span>
//   <input id="styleguide-text-input-1" name="styleguide-text-input-1" aria-labelledby="input-description-1" type="text" title="Input Description" value="" />
// </label>
//
// PatternType: atom
//
// Styleguide 3.2.1

input[type="tel"],
input[type="text"],
input[type="number"],
input[type="email"],
input[type="search"],
input[type="password"],
textarea {
	padding: $spacing-inner/2;
}


// Text Areas
//
// Markup:
// <label for="styleguide-textarea" class="form-text">
//   <span id="input-description-2" class="field-description">Input Description</span>
//   <textarea id="styleguide-textarea" name="styleguide-textarea" aria-labelledby="input-description-2" title="Input Description" value=""></textarea>
// </label>
//
// PatternType: atom
//
// Styleguide 3.2.2

textarea {
	height: 12rem;
	resize: vertical;
	line-height: 1.875rem;
}



// Select Menus
//
// Markup:
// <label class="form-select" for="styleguide-select">
//   <select id="styleguide-select" name="styleguide-select">
//     <option>Select a Value</option>
//     <option value="val1">Option 1</option>
//     <option value="val2">Option 2</option>
//     <option value="val3">Option 3</option>
//   </select>
// </label>
//
// PatternType: atom
//
// Styleguide 3.2.3

label.form-select {

	position: relative;
	border-radius: 1rem;
	box-sizing: border-box;
	z-index: 1;
	display: inline-block;
	margin: $spacing-outer/2 0;
	padding: 1.5rem 0.75rem;

	select {
		display: block;
		min-width: 30rem;
		font-size: 1rem;
		border: none;
		outline: none;
  		background: $panel-background-primary;
		font-size: $font-size-primary;
		font-family: $font-family-secondary;
		letter-spacing: 0.75px;
    	color: $font-color-primary;
	}
}



// Radio Inputs
//
// Radio inputs are very unique in that they will always to come in a set. Unlike checkboxes,
// which present a Yes/No choice, radios present a This-or-That situation. As such, they always
// need a context and should always be contained inside of a `fieldset` element with a `legend`.
//
// Markup: form_radios.html
//
// PatternType: atom
//
// Styleguide 3.2.4



// Checkboxes
//
// Markup: form_checkboxes.html
//
// PatternType: atom
//
// Styleguide 3.2.5

label.form-checkbox,
label.form-radio {

	margin: 0;
	padding: $spacing-inner;
	position: relative;
	cursor: pointer;

	input {
			position: absolute;
			top: 1.5rem;
			left: $spacing-inner/2;
	}

	.field-description {
		font-family: $font-family-secondary;
		display: inline-block;
		vertical-align: top;
		padding: 0.075rem 0 0 1.5rem;
		letter-spacing: 0.75px;
		line-height: 1.5rem;
	}

}


// Fieldsets
//
// Markup: form_radios.html
//
// PatternType: molecule
//
// Styleguide 3.3


fieldset {

	margin: 4.5rem 0;
	position: relative;
	display: block;

	legend {
		position:absolute;
		top: -2.25rem;
	}

	&.has-checkboxes,
	&.has-radios  {

		padding: $spacing-inner $spacing-inner/2;
		min-width: 30rem;
		display: inline-block;

		label.form-checkbox,
		label.form-radio {
			display: inline-block;
			float: left;
			clear: left;
		}

		&.has-inline-fields {
			label {
				width: 50%;
				clear: none;
			}
		}

	}
}


// Search Form
//
// Markup:
// <form class="search-form">
//   <label class="form-text">
//     <input placeholder="Enter a search term." type="search" /> <button type="submit">search</button>
//   </label>
// </form>
//
// PatternType: molecule
//
// ContainsPatterns: Button, Input (Search)
//
// Styleguide 3.3

.search-form {

  position: relative;
  display: inline-block;

  label.form-text {

    input[type="search"] {

    	width: auto;
      margin-right: $spacing-inner;
      padding: 1rem 0.75rem;
      font-family: $font-family-secondary;
      
      &::placeholder {
        color: $font-color-primary;
        font-size: 30px;
      }

    }

  }

  button.form-submit {

    font-family: $font-family-icon;
    color: $font-color-secondary;

    position: absolute;
    right: 0;
    top:0;
    border: none;
    margin:0;
    padding: 0.7rem 1rem;
    background: none;
    height:100%;
    width:4rem;
    text-align: center;
    z-index: 5;

    &:focus,
    &:hover {
      color: $font-color-primary;
    }
  }

}
